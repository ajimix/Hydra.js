ChangeLog:
2.5.0
	* Added methods to decouple the test environment
	* Added documentation to some methods
	* Added a variable to check if is loaded in Node.js
	* Opening new web page
2.2.1
	* Separate Hydra in two differents projects, Core and Extensions.
	* Modify test to remove test from ErrorHandler that are not needed anymore.
2.2.0
	* Separate all the elements not needed for modular architecture.
		* BasicErrorHandler
		* Deferred
	* Create jQuery wrappers to avoid high coupling in modules.
		* Ajax
		* DOM
		* Events
	* Added new methods:
		* noConflict	-> Create an alias to one part of Hydra to be called as a different name
		* extend		-> Add a new functionality to Hydra.
2.1.0
	* Added method to set vars in a private scope only accessible from the init arguments method or using the getter method
		* Methods added:
			- setVars (Expect one object as argument)
			- getVars (Returns a current snapshot of the vars object)
2.0.0
	* Add multi-instance for modules.
		* Now is possible to add more than one instance for the same module.
		* It has been added a new param (id of the DOM element that will be the '__container__' property of the module instance when these methods are called:
			- start
			- stop
			- getModule
			- isModuleStarted
1.3.1
	* Improve aListeningEvents generation. Now the listening events are taken from oEventsCallbacks property of methods. - Thanks, Ramonacus -
1.3.0
	* Delegate some repetitive jobs to the module instance creator, maintaining the size of Hydra.
	* Make easier the work of developers reducing duplicated code and decrease the final size of projects where Hydra.js is used.
	* Some modules have been moved from modules to the instance object when creating it:
		* These methods are not needed anymore to be added to your modules:
			- handleAction
			- destroy
		* Added new properties to the module:
			- aListeningEvents
				- Array of events that the module will start listening</li>
			- oEventsCallbacks
				- Object of callbacks that must match the events
			- onDestroy
				- New destroy method, only, will stop all listeners.
				- This method will be executed before stop listeners.
	* When the module is started the listeners will be activated before the code in init method.
		* Is not needed anymore to start listeners.
1.2.0
	* Added Promise and Deferred objects
1.1.1
	* Added clasical inheritance to objects.
	* Added __action__ to access Action object from modules
	* Added __super__ to access parent object from methods using __call__ method.